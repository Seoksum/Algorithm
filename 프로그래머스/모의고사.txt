#include <string>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> solution(vector<int> answers) {
    vector<int> answer;
    
    int N = answers.size();

	vector<int> one;
	vector<int> two;
	vector<int> three;
	int one_start = 1;
	int two_start = 1;
	int three_start = 3;
	three.push_back(3);
	int two_idx[4] = { 1,3,4,5 };
	int three_idx[5] = { 3,1,2,4,5 };
	int idx = 0;

	for (int i = 0; i < N; i++)
	{
		one.push_back(one_start++);
		if (one_start > 5)
			one_start = 1;
	}

	for (int i = 0; i < N; i++)
	{
		if (i % 2 == 0)
			two.push_back(2);
		else
		{
			two.push_back(two_idx[idx++]);
			idx %= 4;
		}
	}
	idx = 0;
	for (int i = 1; i < N; i++)
	{
		if (i % 2 != 0)
		{
			three.push_back(three_idx[idx]);
		}
		// int three_idx[5] = { 3,1,2,4,5 };
		//                      0 1 2 3 4
		else
		{
			idx++;
			idx %= 5;
			three.push_back(three_idx[idx]);
		}
	}

	int one_ans = 0;
	int two_ans = 0;
	int three_ans = 0;

	for (int i = 0; i < N; i++)
	{
		int ans = answers[i];
		if (one[i] == ans)
			one_ans++;
		if (two[i] == ans)
			two_ans++;
		if (three[i] == ans)
			three_ans++;
	}

	int max_num = max(one_ans, max(two_ans, three_ans));
	if (one_ans == max_num)
		answer.push_back(1);
	if (two_ans == max_num)
		answer.push_back(2);
	if (three_ans == max_num)
		answer.push_back(3);
    
    return answer;
}